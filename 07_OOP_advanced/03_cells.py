# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его
# конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение
# (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение. Умножение. Создаётся общая клетка из двух. Число ячеек
# общей клетки определяется как произведение количества ячеек этих двух клеток. Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****..., где
# количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд
# записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернёт строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.


class Cell:
    def __init__(self, nucleus_number):
        self.n = int(nucleus_number)

    def __add__(self, pair):
        return self.n + pair.n

    def __sub__(self, pair):
        return self.n - pair.n if (self.n - pair.n) > 0 else print('Результат меньше нуля.')

    def __mul__(self, pair):
        return int(self.n * pair.n)

    def __truediv__(self, pair):
        return round(self.n // pair.n) if pair.n != 0 else print('Делить на 0 нельзя.')

    def make_order(self, row_cells):
        row = ''
        for i in range(int(self.n / row_cells)):
            row += f'{"*" * row_cells} \n'
        row += f'{"*" * (self.n % row_cells)}'
        return row


erythrocyte = Cell(33)
adipocyte = Cell(9)

print('Результаты:\n- сложения:', erythrocyte.__add__(adipocyte))
print('- вычитания:', erythrocyte.__sub__(adipocyte))
print('- умножения:', erythrocyte.__mul__(adipocyte))
print('- деления:', erythrocyte.__truediv__(adipocyte))

print('\nРеорганизованные ячейки:')
print(erythrocyte.make_order(12))

