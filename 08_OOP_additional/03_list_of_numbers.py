# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на
# экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода
# пользователем очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если
# введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее
# сообщение. При этом работа скрипта не должна завершаться.

class MyException(Exception):
    def __init__(self, txt):
        self.txt = txt

    def __str__(self):
        return self.txt


class CheckAndAppend:

    def __init__(self):
        self.__final_lst = []
        while True:
            data = input('Введите число: ')
            try:
                self.__final_lst.append(float(data))
                print(self.__final_lst)
            except ValueError:
                print('Ошибка: введено нечисловое значение.')
                print(self.__final_lst)
            if data == 'stop':
                raise Exception('Программа остановлена пользователем.')

    def __str__(self):
        return ', '.join(map(str, self.__final_lst))


if __name__ == '__main__':
    a = CheckAndAppend()
